[{"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\reportWebVitals.js":"1","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\App.js":"2","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\index.js":"3","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\EventList.js":"4","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\CitySearch.js":"5","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\mock-data.js":"6","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\api.js":"7","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\Event.js":"8","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\NumberOfEvents.js":"9","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\Alert.js":"10","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\service-worker.js":"11","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\serviceWorkerRegistration.js":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":1615,"mtime":1608050735447,"results":"15","hashOfConfig":"14"},{"size":1051,"mtime":1608095742911,"results":"16","hashOfConfig":"14"},{"size":437,"mtime":1607977948063,"results":"17","hashOfConfig":"14"},{"size":2008,"mtime":1608075097330,"results":"18","hashOfConfig":"14"},{"size":10342,"mtime":1608050549726,"results":"19","hashOfConfig":"14"},{"size":3527,"mtime":1608014615066,"results":"20","hashOfConfig":"14"},{"size":1147,"mtime":1608058803429,"results":"21","hashOfConfig":"14"},{"size":1132,"mtime":1608075987034,"results":"22","hashOfConfig":"14"},{"size":748,"mtime":1608074178382,"results":"23","hashOfConfig":"14"},{"size":2837,"mtime":1608094161091,"results":"24","hashOfConfig":"14"},{"size":5064,"mtime":1608094154381,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"139qewo",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\reportWebVitals.js",[],["54","55"],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\App.js",[],["56","57"],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\index.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\EventList.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\CitySearch.js",[],["58","59"],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\mock-data.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\api.js",["60"],"/**\r\n *\r\n * @param {*} events:\r\n * The following function should be in the “api.js” file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\n\r\nimport { mockData } from './mock-data';\r\nimport axios from 'axios'; \r\n//import NProgress from 'nprogress';\r\n\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n  };\r\n\r\n  // const checkToken = async (accessToken) => {\r\n  //   const result = await fetch(\r\n  //     `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  //   )\r\n  //     .then((res) => res.json())\r\n  //     .catch((error) => error.json());\r\n  \r\n  //   return result;\r\n  // };\r\n  export const getEvents = async () => {\r\n  //   NProgress.start();\r\n\r\n  //   if (window.location.href.startsWith(\"http://localhost\")) {\r\n  //     NProgress.done();\r\n  //     return mockData;\r\n  //   }\r\n  //   const token = await getAccessToken();\r\n\r\n  // if (token) {\r\n  //   removeQuery();\r\n  //   const url = `https://h05my7dqfb.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${token}`;\r\n  //   const result = await axios.get(url);\r\n  //   if (result.data) {\r\n  //     var locations = extractLocations(result.data.events);\r\n  //     localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n  //     localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n  //   }\r\n  //   NProgress.done();\r\n  //   return result.data.events;\r\n  // }\r\n    return mockData;\r\n  };\r\n\r\n  // export const getAccessToken = async () => {\r\n  //   const accessToken = localStorage.getItem('access_token');\r\n  //   const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  //   if (!accessToken || tokenCheck.error) {\r\n  //     await localStorage.removeItem(\"access_token\");\r\n  //     const searchParams = new URLSearchParams(window.location.search);\r\n  //     const code = await searchParams.get(\"code\");\r\n  //     if (!code) {\r\n  //       const results = await axios.get(\r\n  //         \"https://h05my7dqfb.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\r\n  //       );\r\n  //       const { authUrl } = results.data;\r\n  //       return (window.location.href = authUrl);\r\n  //     }\r\n  //     return code && getToken(code);\r\n  //   }\r\n  //   return accessToken;\r\n\r\n  // }\r\n  // const getToken = async (code) => {\r\n  //   const encodeCode = encodeURIComponent(code);\r\n  //   const { access_token } = await fetch(\r\n  //     `https://h05my7dqfb.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`\r\n  //   )\r\n  //     .then((res) => {\r\n  //       return res.json();\r\n  //     })\r\n  //     .catch((error) => error);\r\n  \r\n  //   access_token && localStorage.setItem(\"access_token\", access_token);\r\n  \r\n  //   return access_token;\r\n  // };\r\n\r\n  // const removeQuery = () => {\r\n  //   if (window.history.pushState && window.location.pathname) {\r\n  //     var newurl =\r\n  //       window.location.protocol +\r\n  //       \"//\" +\r\n  //       window.location.host +\r\n  //       window.location.pathname;\r\n  //     window.history.pushState(\"\", \"\", newurl);\r\n  //   } else {\r\n  //     newurl = window.location.protocol + \"//\" + window.location.host;\r\n  //     window.history.pushState(\"\", \"\", newurl);\r\n  //   }\r\n  // };","C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\Event.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\NumberOfEvents.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\Alert.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\service-worker.js",[],"C:\\Users\\Padmaravi\\Desktop\\careerfoundry\\meet\\src\\serviceWorkerRegistration.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"61","replacedBy":"67"},{"ruleId":"63","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":11,"column":8,"nodeType":"71","messageId":"72","endLine":11,"endColumn":13},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],["73"],["74"],["73"],["74"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]